from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List
import pandas as pd
from datetime import datetime
from enum import Enum


class DataSourceStatus(Enum):
    ACTIVE = "active"
    INACTIVE = "inactive"
    ERROR = "error"


class DataSource(ABC):
    STANDARD_FIELDS = {
        # 行情数据 - 最大集
        "daily": [
            "timestamp",
            "symbol",
            "open",
            "high",
            "low",
            "close",
            "volume",
            "amount",
            "pct_chg",
            "change",
            "turnover",
            "pe",
            "pb",
            "ps",
            "pcf",
            "market_cap",
            "circulating_market_cap",
            "total_shares",
            "float_shares",
        ],
        "minute": [
            "timestamp",
            "symbol",
            "open",
            "high",
            "low",
            "close",
            "volume",
            "amount",
            "pct_chg",
            "change",
            "turnover",
            "pe",
            "pb",
            "ps",
            "pcf",
        ],
        "tick": [
            "timestamp",
            "symbol",
            "price",
            "volume",
            "amount",
            "bid",
            "ask",
            "bid_vol",
            "ask_vol",
            "bid_ask_spread",
            "trade_type",
        ],
        # 宏观数据 - 最大集
        "macro": [
            "timestamp",
            "symbol",
            "value",
            "unit",
            "description",
            "category",
            "subcategory",
            "frequency",
            "source",
            "revision",
        ],
        "gdp": [
            "timestamp",
            "symbol",
            "value",
            "unit",
            "description",
            "category",
            "subcategory",
            "frequency",
            "source",
            "revision",
            "gdp_type",
        ],
        "cpi": [
            "timestamp",
            "symbol",
            "value",
            "unit",
            "description",
            "category",
            "subcategory",
            "frequency",
            "source",
            "revision",
            "cpi_type",
        ],
        "ppi": [
            "timestamp",
            "symbol",
            "value",
            "unit",
            "description",
            "category",
            "subcategory",
            "frequency",
            "source",
            "revision",
            "ppi_type",
        ],
        "m2": [
            "timestamp",
            "symbol",
            "value",
            "unit",
            "description",
            "category",
            "subcategory",
            "frequency",
            "source",
            "revision",
            "m2_type",
        ],
        "interest_rate": [
            "timestamp",
            "symbol",
            "value",
            "unit",
            "description",
            "category",
            "subcategory",
            "frequency",
            "source",
            "revision",
            "rate_type",
        ],
        # 财务数据 - 最大集
        "financial": [
            "timestamp",
            "symbol",
            "revenue",
            "profit",
            "assets",
            "liabilities",
            "equity",
            "gross_profit",
            "operating_profit",
            "net_profit",
            "ebitda",
            "ebit",
            "total_assets",
            "current_assets",
            "fixed_assets",
            "intangible_assets",
            "total_liabilities",
            "current_liabilities",
            "long_term_liabilities",
            "total_equity",
            "paid_in_capital",
            "retained_earnings",
            "treasury_stock",
        ],
        "balance_sheet": [
            "timestamp",
            "symbol",
            "total_assets",
            "current_assets",
            "fixed_assets",
            "intangible_assets",
            "total_liabilities",
            "current_liabilities",
            "long_term_liabilities",
            "total_equity",
            "paid_in_capital",
            "retained_earnings",
            "treasury_stock",
            "minority_interest",
        ],
        "income_statement": [
            "timestamp",
            "symbol",
            "revenue",
            "gross_profit",
            "operating_profit",
            "net_profit",
            "ebitda",
            "ebit",
            "interest_expense",
            "tax_expense",
            "other_income",
            "other_expense",
            "extraordinary_items",
        ],
        "cash_flow": [
            "timestamp",
            "symbol",
            "operating_cash_flow",
            "investing_cash_flow",
            "financing_cash_flow",
            "net_cash_flow",
            "cash_beginning",
            "cash_ending",
            "free_cash_flow",
            "working_capital_change",
        ],
        # 行业数据 - 最大集
        "industry": [
            "timestamp",
            "symbol",
            "industry_name",
            "industry_code",
            "market_cap",
            "pe_ratio",
            "pb_ratio",
            "ps_ratio",
            "pcf_ratio",
            "dividend_yield",
            "total_shares",
            "float_shares",
            "avg_price",
            "price_change",
            "volume",
            "amount",
            "turnover_rate",
            "beta",
            "alpha",
        ],
        "industry_performance": [
            "timestamp",
            "symbol",
            "industry_name",
            "return_rate",
            "volume",
            "amount",
            "market_cap",
            "pe_ratio",
            "pb_ratio",
            "ps_ratio",
            "pcf_ratio",
            "dividend_yield",
            "beta",
            "alpha",
            "sharpe_ratio",
            "max_drawdown",
        ],
        # 概念数据 - 最大集
        "concept": [
            "timestamp",
            "symbol",
            "concept_name",
            "concept_code",
            "market_cap",
            "stock_count",
            "avg_price",
            "price_change",
            "volume",
            "amount",
            "turnover_rate",
            "pe_ratio",
            "pb_ratio",
            "ps_ratio",
            "pcf_ratio",
        ],
        "concept_performance": [
            "timestamp",
            "symbol",
            "concept_name",
            "return_rate",
            "volume",
            "amount",
            "market_cap",
            "stock_count",
            "pe_ratio",
            "pb_ratio",
            "ps_ratio",
            "pcf_ratio",
            "dividend_yield",
            "beta",
            "alpha",
            "sharpe_ratio",
        ],
        # 指数数据 - 最大集
        "index": [
            "timestamp",
            "symbol",
            "open",
            "high",
            "low",
            "close",
            "volume",
            "amount",
            "pct_chg",
            "change",
            "turnover",
            "pe",
            "pb",
            "ps",
            "pcf",
            "market_cap",
            "circulating_market_cap",
            "total_shares",
            "float_shares",
        ],
        "index_daily": [
            "timestamp",
            "symbol",
            "open",
            "high",
            "low",
            "close",
            "volume",
            "amount",
            "pct_chg",
            "change",
            "turnover",
            "pe",
            "pb",
            "ps",
            "pcf",
            "market_cap",
            "circulating_market_cap",
            "total_shares",
            "float_shares",
        ],
        # 基金数据 - 最大集
        "fund": [
            "timestamp",
            "symbol",
            "nav",
            "acc_nav",
            "pct_chg",
            "volume",
            "amount",
            "fund_type",
            "fund_company",
            "fund_manager",
            "fund_size",
            "management_fee",
            "custody_fee",
            "sales_fee",
            "redemption_fee",
        ],
        "fund_daily": [
            "timestamp",
            "symbol",
            "nav",
            "acc_nav",
            "pct_chg",
            "volume",
            "amount",
            "fund_type",
            "fund_company",
            "fund_manager",
            "fund_size",
            "management_fee",
            "custody_fee",
            "sales_fee",
            "redemption_fee",
        ],
        # 债券数据 - 最大集
        "bond": [
            "timestamp",
            "symbol",
            "price",
            "yield_rate",
            "volume",
            "amount",
            "bond_type",
            "maturity_date",
            "coupon_rate",
            "face_value",
            "market_value",
            "duration",
            "convexity",
            "credit_rating",
            "issuer",
            "guarantor",
        ],
        "bond_daily": [
            "timestamp",
            "symbol",
            "price",
            "yield_rate",
            "volume",
            "amount",
            "bond_type",
            "maturity_date",
            "coupon_rate",
            "face_value",
            "market_value",
            "duration",
            "convexity",
            "credit_rating",
            "issuer",
            "guarantor",
        ],
        # 期货数据 - 最大集
        "futures": [
            "timestamp",
            "symbol",
            "open",
            "high",
            "low",
            "close",
            "volume",
            "amount",
            "settlement",
            "open_interest",
            "futures_type",
            "delivery_month",
            "contract_size",
            "tick_size",
            "margin_rate",
            "commission_rate",
        ],
        "futures_daily": [
            "timestamp",
            "symbol",
            "open",
            "high",
            "low",
            "close",
            "volume",
            "amount",
            "settlement",
            "open_interest",
            "futures_type",
            "delivery_month",
            "contract_size",
            "tick_size",
            "margin_rate",
            "commission_rate",
        ],
        # 期权数据 - 最大集
        "options": [
            "timestamp",
            "symbol",
            "open",
            "high",
            "low",
            "close",
            "volume",
            "amount",
            "implied_volatility",
            "delta",
            "gamma",
            "theta",
            "vega",
            "rho",
            "options_type",
            "strike_price",
            "expiration_date",
            "underlying_asset",
        ],
        "options_daily": [
            "timestamp",
            "symbol",
            "open",
            "high",
            "low",
            "close",
            "volume",
            "amount",
            "implied_volatility",
            "delta",
            "gamma",
            "theta",
            "vega",
            "rho",
            "options_type",
            "strike_price",
            "expiration_date",
            "underlying_asset",
        ],
        # 因子数据 - 最大集
        "factor": [
            "timestamp",
            "symbol",
            "factor_name",
            "factor_value",
            "factor_type",
            "description",
            "factor_category",
            "factor_source",
            "factor_period",
            "factor_weight",
            "factor_ic",
            "factor_ir",
            "factor_rank_ic",
            "factor_turnover",
        ],
        "technical_factor": [
            "timestamp",
            "symbol",
            "factor_name",
            "factor_value",
            "period",
            "description",
            "factor_category",
            "factor_source",
            "factor_weight",
            "factor_ic",
            "factor_ir",
            "factor_rank_ic",
            "factor_turnover",
            "factor_decay",
        ],
        "fundamental_factor": [
            "timestamp",
            "symbol",
            "factor_name",
            "factor_value",
            "sector",
            "description",
            "factor_category",
            "factor_source",
            "factor_weight",
            "factor_ic",
            "factor_ir",
            "factor_rank_ic",
            "factor_turnover",
            "factor_decay",
        ],
        # 回测数据 - 最大集
        "backtest": [
            "timestamp",
            "strategy_id",
            "symbol",
            "position",
            "pnl",
            "cumulative_pnl",
            "return_rate",
            "sharpe_ratio",
            "max_drawdown",
            "volatility",
            "beta",
            "alpha",
            "information_ratio",
            "calmar_ratio",
            "sortino_ratio",
        ],
        "backtest_result": [
            "timestamp",
            "strategy_id",
            "symbol",
            "total_return",
            "sharpe_ratio",
            "max_drawdown",
            "volatility",
            "beta",
            "alpha",
            "information_ratio",
            "calmar_ratio",
            "sortino_ratio",
            "win_rate",
            "profit_factor",
            "recovery_factor",
        ],
        # 信号数据 - 最大集
        "signal": [
            "timestamp",
            "strategy_id",
            "symbol",
            "signal_type",
            "signal_strength",
            "price",
            "quantity",
            "signal_source",
            "signal_confidence",
            "signal_priority",
            "signal_status",
            "signal_expiry",
            "signal_metadata",
            "signal_tags",
        ],
        "trade_signal": [
            "timestamp",
            "strategy_id",
            "symbol",
            "signal_type",
            "signal_strength",
            "price",
            "quantity",
            "signal_source",
            "signal_confidence",
            "signal_priority",
            "signal_status",
            "signal_expiry",
            "signal_metadata",
            "signal_tags",
        ],
        # 通用数据 - 最大集
        "general": [
            "timestamp",
            "symbol",
            "value",
            "unit",
            "description",
            "category",
            "subcategory",
            "source",
            "quality",
            "confidence",
            "metadata",
            "tags",
            "attributes",
        ],
        "time_series": [
            "timestamp",
            "symbol",
            "value",
            "unit",
            "description",
            "category",
            "subcategory",
            "source",
            "quality",
            "confidence",
            "metadata",
            "tags",
            "attributes",
        ],
    }

    def __init__(self, name: str, priority: int = 1):
        self.name = name
        self.priority = priority
        self.status = DataSourceStatus.ACTIVE
        self.last_check = None
        self.error_count = 0
        self.max_errors = 3

    @abstractmethod
    async def fetch_data(self, data_type: str, **kwargs) -> pd.DataFrame:
        pass

    @abstractmethod
    async def get_available_data_types(self) -> List[str]:
        pass

    @abstractmethod
    async def validate_params(self, data_type: str, **kwargs) -> bool:
        pass

    @abstractmethod
    async def health_check(self) -> bool:
        pass

    async def is_available(self) -> bool:
        if self.status == DataSourceStatus.INACTIVE:
            return False

        if self.error_count >= self.max_errors:
            self.status = DataSourceStatus.INACTIVE
            return False

        return await self.health_check()

    def record_error(self):
        self.error_count += 1
        self.last_check = datetime.now()
        if self.error_count >= self.max_errors:
            self.status = DataSourceStatus.ERROR

    def record_success(self):
        self.error_count = 0
        self.last_check = datetime.now()
        self.status = DataSourceStatus.ACTIVE

    @abstractmethod
    async def normalize_data(
        self,
        data: pd.DataFrame,
        symbol: str,
        data_type: str = "daily",
    ) -> pd.DataFrame:
        pass

    def get_standard_fields(self, data_type: str) -> List[str]:
        return self.STANDARD_FIELDS.get(
            data_type, ["timestamp", "value", "unit", "description"]
        )

    def validate_data_format(self, data: pd.DataFrame, data_type: str) -> bool:
        if data.empty:
            return True

        standard_fields = self.get_standard_fields(data_type)
        required_fields = ["timestamp"]

        for field in standard_fields:
            if field not in data.columns:
                return False

        data_columns = set(data.columns)
        standard_fields = set(standard_fields)

        missing_fields = standard_fields - data_columns
        if missing_fields:
            return False

        return True
